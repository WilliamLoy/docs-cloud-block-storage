<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!-- Some useful entities borrowed from HTML -->
<!ENTITY ndash  "&#x2013;">
<!ENTITY mdash  "&#x2014;">
<!ENTITY hellip "&#x2026;">

<!-- Useful for describing APIs -->
<!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
<!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
<!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
<!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>

<!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
<!ENTITY ENDPOINT-US "https://auth.api.rackspacecloud.com/v2.0/">
<!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">

<!ENTITY CHECK  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject>
<imagedata fileref="img/Check_mark_23x20_02.svg"
format="SVG" scale="60"/>
</imageobject>
</inlinemediaobject>'>

<!ENTITY ARROW  '<inlinemediaobject xmlns="http://docbook.org/ns/docbook">
<imageobject>
<imagedata fileref="img/Arrow_east.svg"
format="SVG" scale="60"/>
</imageobject>
</inlinemediaobject>'>
]>
<book 
    xmlns="http://docbook.org/ns/docbook" 
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:xlink="http://www.w3.org/1999/xlink" 
    xmlns:wadl="http://wadl.dev.java.net/2009/02"
    version="5.0-extension RackBook-2.0" 
    xml:id="cbs-devguide">
  <title>Rackspace Cloud Block Storage Developer Guide</title>

  <?rax title.font.size="35px" subtitle.font.size="20px"?>
  <info>
    <copyright>
      <year>2012</year>
      <year>2013</year>
    </copyright>
    <releaseinfo>API v1.0</releaseinfo>
    <productname>Rackspace Cloud Block Storage</productname>
    <pubdate>2013-08-09</pubdate>
    <legalnotice role="rs-api">
      <annotation>
        <remark>Copyright details are filled in by the template.  </remark>
      </annotation>
    </legalnotice>
    <abstract>
      <para>This document is intended for software developers
        interested in developing applications using the
        Rackspace Cloud Block Storage Application Programming
        Interface (<abbrev>API</abbrev>). </para>
    </abstract>
    <revhistory>
      <revision>
        <date>2013-10-25</date>
        <revdescription>
          <para>Added <xref linkend="RBAC"/>.</para>
        </revdescription>
      </revision>
      <revision>
        <date>2013-08-09</date>
        <revdescription>
          <itemizedlist>
            <listitem>
              <para>Added the API operation Rename Volume (<xref
                  linkend="volume"/>).</para>
            </listitem>
            <listitem>
              <para>Updated the <code>size</code> parameter
                description for Create Volume in <xref
                  linkend="volume"/> because the way creating a volume
                from a snapshot changed. The API for creating a volume
                from a snapshot was ignoring the size parameter and
                was creating a volume the same size as the snapshot.
                Now the volume size must be greater than the snapshot
                size. </para>
            </listitem>
            <listitem>
              <para>Updated the Create Snapshot description in <xref
                  linkend="volume"/> adding information about snapshot
                progress. The progress is visible in the
                "os-extended-snapshot-attributes:progress" field of
                the snapshot. </para>
            </listitem>
            <!-- <listitem>
              <para>???? (This one is still "coming soon.") Updated
                Delete Snapshot description in <xref linkend="volume"
                /> adding information about  instant snapshot deletes.
                When you delete your snapshots, they will show up as
                deleted very soon after the call finishes. You can
                perform additional operations on the snapshot's volume
                without getting 409 conflicts.???? </para>
            </listitem> -->
            <listitem>
              <para>Moved the definitions of terms formally in the
                Concepts section to the <xref
                  linkend="glossary-d1e018"/> and renamed the Concepts
                section to <xref linkend="Terminology"/>.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2013-01-04</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Removed camel-case for JSON examples. Removed
                acronym. </para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-10-29</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>Added ORD and LON endpoints.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
      <revision>
        <date>2012-10-23</date>
        <revdescription>
          <itemizedlist spacing="compact">
            <listitem>
              <para>First public release.</para>
            </listitem>
          </itemizedlist>
        </revdescription>
      </revision>
    </revhistory>
    <raxm:metadata
	xmlns:raxm="http://docs.rackspace.com/api/metadata">
      <raxm:displayname>API Developer Guide</raxm:displayname>
      <raxm:product version="v1.0">cbs</raxm:product>
      <raxm:priority>20</raxm:priority>
    </raxm:metadata>
  </info>
  <preface xml:id="Overview" security="writeronly">
    <title>OpenStack API Reference</title>

    <para>The OpenStack system has several key projects that are
    separate installations but can work together depending on your
    cloud needs: OpenStack Compute, OpenStack Object Storage,
    OpenStack Identity Service, and OpenStack Image Service.</para>

    <para>This page covers the basics for working with your OpenStack
    cloud through the Compute API and Image API after authorizing with
    the Identity Service API. You can then build a cloud by launching
    images and assigning metadata to instances, all through an
    API. Refer to the <link
    xlink:href="http://docs.openstack.org/api/quick-start/content/">API Quick Start
    Guide</link> for details about using the APIs referenced here, and
    go to <link
    xlink:href="http://docs.openstack.org/api/">docs.openstack.org/api</link>
    for specifications of each API.
    </para>
  </preface>
  <preface xml:id="overview" xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml">
    <title>Overview</title>
    <para>Rackspace Cloud Block Storage is a block level storage
      solution that allows customers to mount drives or volumes to
      their Rackspace Next Generation Cloud Servers<trademark/>. The
      two primary use cases are (1) to allow customers to scale their
      storage independently from their compute resources, and (2)
      to allow customers to utilize high performance storage to serve
      database or I/O-intensive applications. 
    </para>
    <para>Interactions with Cloud Block Storage occur programmatically via the Cloud Block 
      Storage API as described in this developer guide.
    </para>
    <para>Rackspace offers both a low cost/gigabyte (GB) option with
      standard performance for customers who only require more storage
      and a high performance option that provides increased storage
      with higher performance (at a higher cost/GB). 
    </para>
    <para>Highlights of Rackspace Cloud Block Storage include:<itemizedlist>
      <listitem>
        <para>Mount a drive to a Cloud Server to scale storage
          without paying for more compute capability.</para>
      </listitem>
      <listitem>
          <para>A high performance option
            for databases and high performance applications,
            leveraging solid state drives for speed.</para>
        </listitem>
        <listitem>
          <para>A standard speed option 
            for customers who just need
            additional storage on their Cloud Server.</para>
        </listitem>
        <listitem>
          <para>Two simple price options:</para>
          <itemizedlist>
            <listitem>
              <para>Lower cost per GB for standard performance 
                and additional storage.</para>
            </listitem>
            <listitem>
              <para>Higher cost per GB for high performance
                and additional storage.</para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
      </para>
    <note><title>Notes</title>
      <itemizedlist>
        <listitem>
          <para>Cloud Block Storage is an add-on feature to
            Next Generation Cloud Servers.  Customers may not attach
            Cloud Block Storage volumes to other instances, like first generation Cloud Servers.</para>
        </listitem>
        <listitem>
          <para>Cloud Block Storage is multi-tenant rather than
            dedicated.</para>
        </listitem>
        <listitem>
          <para>When volumes are destroyed, Rackspace keeps that disk
            space unavailable until zeros have been written to the
            space to ensure that data is not accessible by any other
            customers.</para>
        </listitem>
        <listitem>
          <para>Cloud Block Storage allows you to create snapshots
            that you can save, list, and restore.</para>
        </listitem>
      </itemizedlist>
    </note>
<!-- 
    <para security="writeronly">The following figure shows an overview
      of Cloud Block Storage: <informalfigure>
        <mediaobject>
          <imageobject role="fo">
            <imagedata fileref="images/Cloud_DB_Infographic-1.svg"
              contentwidth="6in"/>
          </imageobject>
          <imageobject role="html">
            <imagedata fileref="images/Cloud_DB_Infographic-1.png"/>
          </imageobject>
        </mediaobject>
      </informalfigure>
    </para>
    <remark security="reviewer">Writer: need to get architecture diagram for CBS and
      include it above. Ask Megan to provide.</remark>
    <para security="writeronly">We welcome feedback, comments, and bug
      reports at <link xlink:href="http://feedback.rackspacecloud.com"
        >http://feedback.rackspacecloud.com</link>.</para>
    <remark security="reviewer">Writer: check whether following statement should be added
      back in for public (not private) beta: Issues and bug reports
      can be directed to your support team via ticket, chat, email, or
      phone.</remark>
-->
    <section xml:id="Intended_Audience-d1e122">
      <title>Intended Audience</title>
      <para> This Guide is intended to assist software developers who
        want to develop applications using the Cloud Block Storage
        API. It assumes the reader has a general understanding of
        storage and is familiar with: </para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>RESTful web services</para>
        </listitem>
        <listitem>
          <para>HTTP/1.1 conventions</para>
        </listitem>
        <listitem>
          <para>JSON and/or XML data serialization formats</para>
        </listitem>
      </itemizedlist>
    </section>
    <?hard-pagebreak?>
    <section xml:id="Document_Change_History-d1e166">
      <title>Document Change History</title>
      <para>This version of the Developer Guide replaces and obsoletes
        all previous versions. The most recent changes are described
        in the table below:</para>
      <?rax revhistory?>
    </section>
    <section xml:id="Additional_Resources-d1e532">
      <title>Additional Resources</title>
<!-- 
      <para>Descriptive information about Cloud Block Storage is also
        published in its Web Application Description Language (WADL)
        and XML Schema Definition (XSD). You are welcome to read this
        information here:
        </para>
      <itemizedlist>
        <listitem>
          <para>The WADL is <link
              xlink:href="http://docs.rackspace.com/cbs/api/v1.0/cbs.wadl"
            />.</para>
        </listitem>
        <listitem>
          <para>The XSD is <link
              xlink:href="http://docs.rackspace.com/cbs/api/v1.0/xsd/cbs.xsd"
            />. </para>
        </listitem>
      </itemizedlist>
      -->
      <para>You can download the most current versions of the
        API-related documents from <link
          xlink:href="http://docs.rackspace.com/api/"
          >docs.rackspace.com/api/</link>. 
      </para>
      <para>For information about getting started using Cloud Block
        Storage and Cloud Servers, refer to <citetitle>Getting Started
          with Rackspace Cloud Block Storage and
        Servers</citetitle>.</para>
      <para>For information about Rackspace Cloud products, refer to
          <link xlink:href="http://www.rackspace.com/cloud/"
          >www.rackspace.com/cloud</link>. This site also
        offers links to Rackspace's official support channels,
        including knowledge base articles, forums, phone, chat, and
        email. </para>
      <para>You can follow Rackspace updates and announcements
        via twitter at: <link
          xlink:href="http://www.twitter.com/rackspace"
          >www.twitter.com/rackspace</link>. </para>
      <para>This API uses standard HTTP 1.1 response codes as
        documented at: <link
          xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html"
          >www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</link>.
      </para>
    </section>
    <section xml:id="API_Contract_Changes-d1e363">
      <title>API Contract Changes</title>
      <para>Rackspace will notify customers in Release Notes when and
        if the contract does change.</para>
    </section>
<!-- </chapter>
  <chapter xml:id="Concepts-d1e563"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml">
-->
    <section xml:id="Terminology">
    <title>Terminology</title>
    <?dbhtml stop-chunking?>
    <para>To use the Cloud Block Storage API effectively, you should
        understand the terms defined in the <xref
          linkend="glossary-d1e018"/>.</para>      
      
    </section>
  </preface>
  
  <chapter xml:id="General_API_Information-d1e633"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml">
    <title>General API Information</title>
    <para>The Cloud Block Storage API is implemented using a RESTful
      web service interface. Like other products in the Rackspace
      Cloud suite, Cloud Block Storage shares a common token-based
      authentication system that allows seamless access between
      products and services. </para>
    <note>
      <para> All requests to authenticate against and operate the
        service are performed using SSL over HTTP (HTTPS) on TCP port
        443. </para>
    </note>
    <section xml:id="Authentication-d1e647">
      <title>Authentication</title>
      <para> Every REST request against the Block Storage Service
        requires the inclusion of a specific authorization token,
        supplied by the <code>X-Auth-Token</code> HTTP header.
        Customers obtain this token by first using the Rackspace Cloud
        Authentication Service and supplying a valid username and API
        access key. </para>
      <para>
        To authenticate, submit a <code>POST/v2.0/tokens</code> request, 
        presenting valid Rackspace customer credentials 
        in the message body to a Rackspace authentication endpoint
        . 
      </para>
      <para>
        <emphasis role="bold">GET YOUR CREDENTIALS</emphasis>
      </para>
      <para> You can use either of two sets of credentials: <itemizedlist>
        <listitem>
          <para>your <code>username</code> and
            <code>password</code></para>
        </listitem>
        <listitem>
          <para>your <code>username</code> and <code>API
            key</code></para>
        </listitem>
      </itemizedlist>
      </para>
      <para>
        Your <code>username</code> and
        <code>password</code> are the ones you use to login to the 
        Rackspace control panel. Once you are logged in, you can use 
        the Rackspace control panel to obtain your <code>API key</code>.
      </para>
      <para>
        Use the control panel for the region in which your account is based: 
        <itemizedlist spacing="compact">
          <listitem>
            <para>
              US-based accounts use the control panel at <link xlink:href="https://manage.rackspacecloud.com/">https://manage.rackspacecloud.com/</link>.
            </para>
          </listitem>
<!--
          <listitem>
            <para> UK-based accounts use the control panel at
              <link
                xlink:href="https://lon.manage.rackspacecloud.com/"
                >https://lon.manage.rackspacecloud.com/</link>. </para>
          </listitem>
          -->
        </itemizedlist> 
      </para>
      <para>
        <emphasis role="bold">CHOOSE YOUR AUTHENTICATION ENDPOINT</emphasis>
      </para>
      <para>
        Use the authentication endpoint for the region in which your account is based:
        <itemizedlist spacing="compact">
          <listitem>
            <para> US-based accounts authenticate through
              <link xlink:href="&ENDPOINT-US;">&ENDPOINT-US;</link>.</para>
          </listitem>
<!--
         <listitem>
            <para> UK-based accounts authenticate through
              <link xlink:href="&ENDPOINT-UK;">&ENDPOINT-UK;</link>.</para>
          </listitem>
          -->
        </itemizedlist>
      </para>
      <para>
        <emphasis role="bold">SEND YOUR CREDENTIALS TO YOUR AUTHENTICATION
          ENDPOINT</emphasis>
      </para>
      <para> If you know your credentials and your authentication
        endpoint, and you can issue a <code>POST
          /v2.0/tokens</code> request in an API call, you have
        all the basic information you need to use the Rackspace
        Cloud Identity Service. 
      </para>
      <para> You can use <link xlink:href="http://curl.haxx.se/"
        >cURL</link> to try the authentication process in two
        steps: get a token; send the token to a service.<orderedlist>
          <listitem>
            <para>Get an authentication token by providing
              your username and either your API key or your
              password. Here are examples of both
              approaches:</para>
            <para><emphasis>You can request a token by
              providing your username and your API
              key.</emphasis></para>
            <para>
              <literallayout class="monospaced">curl -X POST https://auth.api.rackspacecloud.com/v2.0/tokens -d 
'{ "auth":{ "RAX-KSKEY:apiKeyCredentials":{ "username":"theUserName", "apiKey":"00a00000a000a0000000a000a00aaa0a" } } }' -H "Content-type: application/json"</literallayout>
            </para>
            <para><emphasis>You can request a token by
              providing your username and your
              password.</emphasis></para>
            <para>
              <literallayout class="monospaced">curl -X POST https://auth.api.rackspacecloud.com/v2.0/tokens -d
'{"auth":{"passwordCredentials":{"username":"theUserName","password":"thePassword"}}}' -H "Content-type: application/json"</literallayout>
            </para>
            <para> Successful authentication returns a token
              which you can use as evidence that your
              identity has already been authenticated. To
              use the token, pass it to other services as an
              <code>X-Auth-Token</code> header. </para>
            <para> Authentication also returns a service
              catalog, listing the endpoints you can use for
              Cloud services. </para>
          </listitem>
          <listitem>
            <para>Use the authentication token to send a GET
              to a service you would like to use. Here is an
              example of passing an authentication token to
              the Cloud Files service, using the Cloud Files
              service catalog endpoint that was returned
              along with the token.</para>
            <para><emphasis>You can use a token and a service endpoint to tell a service that your credentials are valid.</emphasis></para>
            <para>
              <literallayout class="monospaced">curl -X GET https://storage101.dfw1.clouddrive.com/v1/MossoCloudFS_aaaaaaaa-bbbb-cccc-dddd-eeeeeeee
-H 'X-Auth-Token:11111111-aaaa-2222-bbbb-3333cccc4444' --verbose</literallayout>
            </para>
          </listitem>
        </orderedlist>
      </para>
      <tip>
        <para> For links to language binding examples you can adapt to
          work with the Cloud Identity service, visit <link
            xlink:href="https://github.com/rackspace"
            >https://github.com/rackspace</link>.</para>
      </tip>
             
        <para>Authentication tokens are typically valid for 24 hours.
          Applications should be designed to re-authenticate after
          receiving a 401 (Unauthorized) response from a service
          endpoint. </para>
        <important>
          <para>If you are programmatically parsing an authentication
            response, please be aware that service names are stable
            for the life of the particular service and can be used as
            keys. You should also be aware that a user's service
            catalog can include multiple uniquely-named services which
            perform similar functions. For example,
            cloudServersOpenStack is the OpenStack version of compute
            whereas cloudServers is the legacy version of compute; the
            same user can have access to both services. In Auth 2.0,
            the service type attribute can be used as a key by which
            to recognize similar services; see the tip below.</para>
        </important>
        <tip>
          <para>Beginning with Auth 2.0, the service catalog includes
            a service type attribute to identify services that perform
            similar functions but have different names; for example,
              <code>type="compute"</code> identifies compute services
            such as cloudServers and cloudServersOpenStack. Some
            developers have found the service type attribute to be
            useful in parsing the service catalog. For Auth 2.0 (also
            known as the Cloud Identity Service), you can see the
            service type attribute in the "Service Catalog in
            Authentication Response" samples in the <citetitle>Cloud
              Identity Client Developer Guide</citetitle> at <link
              xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/Sample_Request_Response-d1e64.html"
              >http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/Sample_Request_Response-d1e64.html</link>.</para>
        </tip>

    </section>
    <section xml:id="RBAC">
      <title>Role Based Access Control</title>
      <para>Role Based Access Control (RBAC) restricts access to the
        capabilities of Rackspace Cloud services, including the Cloud
        Block Storage API, to authorized users only. RBAC enables
        Rackspace Cloud customers to specify which account users of
        their Cloud account have access to which Cloud Block Storage
        API service capabilities, based on roles defined by Rackspace
        (see <xref linkend="RBAC_product_roles_table"/>). The
        permissions to perform certain operations in Cloud Block
        Storage API – create, read, update, delete – are assigned to
        specific roles, and these roles can be assigned by the Cloud
        account admin user to account users of the account. </para>
      <section xml:id="Assigning-Roles-d1e001">
        <title>Assigning Roles to Account Users</title>
        <para>The account owner (identity:user-admin) can create
          account users on the account and then assign roles to those
          users. The roles grant the account users specific
          permissions for accessing the capabilities of the Cloud
          Block Storage service. Each account has only one account
          owner, and that role is assigned by default to any Rackspace
          Cloud account when the account is created.</para>
        <para>See the <citetitle>Cloud Identity Client Developer
            Guide</citetitle> for information about how to perform the
          following tasks:</para>
        <itemizedlist>
          <listitem>
            <para><link
                xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/POST_addUser_v2.0_users_.html"
                > Create account users</link></para>
          </listitem>
          <listitem>
            <para><link
                xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/PUT_addUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__.html"
                > Assign roles to account users</link></para>
          </listitem>
          <listitem>
            <para><link
                xlink:href="http://docs-internal.rackspace.com/auth/api/v2.0/auth-client-devguide/content/DELETE_deleteUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__.html"
                > Delete roles from account users</link></para>
          </listitem>
        </itemizedlist>
        <note>
          <para>The account admin user (identity:user-admin) role
            cannot hold any additional roles because it already has
            full access to all capabilities by default.</para>
        </note>
      </section>
      <section xml:id="RBAC_product_roles">
        <title>Roles Available for Cloud Block Storage </title>
        <para>Three roles (admin, creator, and observer) can be used
          to access the Cloud Block Storage API specifically. The
          following table describes these roles and their
          permissions.</para>
        <table xml:id="RBAC_product_roles_table" rules="all">
          <caption>Cloud Block Storage Product Roles and
            Capabilities</caption>
          <col width="50%"/>
          <col width="50%"/>
          <thead>
            <tr>
              <th>Role Name</th>
              <th>Role Permissions</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>cbs:admin</td>
              <td>This role provides Create, Read, Update, and Delete
                permissions in Cloud Block Storage, where access is
                granted.</td>
            </tr>
            <tr>
              <td>cbs:creator</td>
              <td>This role provides Create, Read and Update
                permissions in Cloud Block Storage, where access is
                granted.</td>
            </tr>
            <tr>
              <td>cbs:observer</td>
              <td>This role provides Read permission in Cloud Block
                Storage, where access is granted.</td>
            </tr>
          </tbody>
        </table>
        <para>Additionally, two multiproduct roles apply to all
          products. Users with multiproduct roles inherit access to
          future products when those products become RBAC-enabled. The
          following table describes these roles and their
          permissions.</para>
        <table rules="all">
          <caption> Multiproduct (Global) Roles and
            Permissions</caption>
          <col width="50%"/>
          <col width="50%"/>
          <thead>
            <tr>
              <th>Role Name</th>
              <th>Role Permissions</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>admin</td>
              <td>This role provides Create, Read, Update, and Delete
                permissions in all products, where access is
                granted.</td>
            </tr>
            <tr>
              <td>observer</td>
              <td>This role provides Read permission in all products,
                where access is granted.</td>
            </tr>
          </tbody>
        </table>
      </section>
      <section xml:id="RBAC-Resolving-Conflicts-d1e001" version="5.0">
        <title>Resolving Conflicts Between RBAC Multiproduct vs.
          Custom (Product-specific) Roles</title>
        <para>The account owner can set roles for both multiproduct
          and Cloud Block Storage scope, and it is important to
          understand how any potential conflicts among these roles are
          resolved. When two roles appear to conflict, the role that
          provides the more extensive permissions takes precedence.
          Therefore, admin roles take precedence over observer and
          creator roles, because admin roles provide more permissions. </para>
        <para>The following table shows two examples of how potential
          conflicts between user roles in the Control Panel are
          resolved: </para>
        <para>
          <informaltable rules="all">
            <thead>
              <tr align="center">
                <td>Permission Configuration</td>
                <td>View of Permission in the Control Panel </td>
                <td>Can the User Perform Product Admin Functions in
                  the Control Panel?</td>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td>User is assigned the following roles: multiproduct
                    <emphasis role="bold">observer</emphasis> and
                  Cloud Block Storage <emphasis role="bold"
                    >admin</emphasis></td>
                <td>Appears that the user has only the multiproduct
                    <emphasis role="bold">observer</emphasis>
                  role</td>
                <td>Yes, for Cloud Block Storage only. The user has
                  the <emphasis role="bold">observer</emphasis> role
                  for the rest of the products.</td>
              </tr>
              <tr>
                <td>User is assigned the following roles: multiproduct
                    <emphasis role="bold">admin</emphasis> and Cloud
                  Block Storage <emphasis role="bold"
                    >observer</emphasis></td>
                <td>Appears that the user has only the multiproduct
                    <emphasis role="bold">admin</emphasis> role</td>
                <td>Yes, for all of the products. The Cloud Block
                  Storage <emphasis role="bold">observer</emphasis>
                  role is ignored.</td>
              </tr>
            </tbody>
          </informaltable>
        </para>
      </section>
      <section xml:id="RBAC-Permissions-Cross-Ref-d1e001" version="5.0">
        <title>RBAC Permissions Cross-reference to Cloud Block Storage
          API Operations</title>
        <para>API operations for Cloud Block Storage may or may not be
          available to all roles. To see which operations are
          permitted to invoke which calls, please review <link
            xlink:href="http://www.rackspace.com/knowledge_center/article/permissions-matrix-for-role-based-access-control-rbac"
            > the Knowledge Center article</link>.</para>
      </section>
      <!--      
      <section xml:id="operationsRoles">
        <title>Cloud Block Storage Operations and Their Roles</title>
        <para>The following table shows the roles that each Cloud
          Block Storage operation can have.</para>
        <table rules="all">
          <caption>Cloud Block Storage Operations and Their
            Roles</caption>
          <col width="25%"/>
          <col width="25%"/>
          <col width="25%"/>
          <col width="25%"/>
          <thead>
            <tr>
              <th>API Operation</th>
              <th>Creator</th>
              <th>Observer</th>
              <th>Admin</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td><emphasis role="bold">Volumes:</emphasis></td>
              <td/>
              <td/>
              <td/>
            </tr>
            <tr>
              <td>Create Volume</td>
              <td>X</td>
              <td/>
              <td>X</td>
            </tr>
            <tr>
              <td>List Volumes</td>
              <td>X</td>
              <td>X</td>
              <td>X</td>
            </tr>
            <tr>
              <td>Show Volumes</td>
              <td>X</td>
              <td>X</td>
              <td>X</td>
            </tr>
            <tr>
              <td>Rename Volume</td>
              <td>X</td>
              <td/>
              <td>X</td>
            </tr>
            <tr>
              <td>Delete Volume</td>
              <td/>
              <td/>
              <td>X</td>
            </tr>
            <tr>
              <td/>
              <td/>
              <td/>
              <td/>
            </tr>
            <tr>
              <td><emphasis role="bold">Volume Types:</emphasis></td>
              <td/>
              <td/>
              <td/>
            </tr>
            <tr>
              <td>List Volume Types</td>
              <td>X</td>
              <td>X</td>
              <td>X</td>
            </tr>
            <tr>
              <td>Describe Volume Type</td>
              <td>X</td>
              <td/>
              <td>X</td>
            </tr>
            <tr>
              <td/>
              <td/>
              <td/>
              <td/>
            </tr>
            <tr>
              <td><emphasis role="bold">Snapshots</emphasis>:</td>
              <td/>
              <td/>
              <td/>
            </tr>
            <tr>
              <td>Create Snapshot</td>
              <td>X</td>
              <td/>
              <td>X</td>
            </tr>
            <tr>
              <td>List Snapshots</td>
              <td>X</td>
              <td>X</td>
              <td>X</td>
            </tr>
            <tr>
              <td>Show Snapshot</td>
              <td>X</td>
              <td>X</td>
              <td>X</td>
            </tr>
            <tr>
              <td>Delete Snapshot</td>
              <td/>
              <td/>
              <td>X</td>
            </tr>
          </tbody>
        </table>
      </section>
-->
    </section>
    <section xml:id="Service_Access_Endpoints-d1e753">
      <title>Service Access/Endpoints</title>
      <para>The Cloud Block Storage Service is a regionalized service.
        The user of the service is therefore responsible for
        appropriate replication, caching, and overall maintenance of
        Cloud Block Storage data across regional boundaries to other
        Cloud Block Storage servers.</para>
      <para>You can find the available service access/endpoints for
        Cloud Block Storage summarized in the table below.</para>
      <?rax-fo keep-with-next?>
      <para>
        <table rules="all">
          <caption>Regionalized Service Endpoints</caption>
          <thead>
            <tr align="center">
              <td colspan="2">Region</td>
              <td colspan="5">Endpoint</td>
            </tr>
          </thead>
          <tbody>
            <tr align="left">
              <td colspan="2">Chicago (ORD)</td>
              <td colspan="5"
                ><code>https://ord.blockstorage.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/
              </td>
            </tr>
            <tr>
              <td colspan="2">Dallas/Ft. Worth (DFW)</td>
              <td colspan="5"
                  ><code>https://dfw.blockstorage.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/</td>
            </tr>
            <tr>
              <td colspan="2">Northern Virginia (IAD)</td>
              <td colspan="5"
                  ><code>https://iad.blockstorage.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/</td>
            </tr>
            <tr align="left">
              <td colspan="2">London (LON)</td>
              <td colspan="5"
                ><code>https://lon.blockstorage.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/
              </td>
            </tr>
            <tr>
              <td colspan="2">Sydney (SYD)</td>
              <td colspan="5"
                  ><code>https://syd.blockstorage.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/</td>
            </tr>
          </tbody>
        </table>
      </para>
      <para>Replace the sample account ID number,
          <parameter>1234</parameter>, with your actual account number
        returned as part of the authentication service
        response.</para>
      <para>You will find the actual account number after the final
        '/' in the <code>publicURL</code> field returned by the
        authentication response.</para>
    </section>
    <section xml:id="DB_service_versions">
      <title>Cloud Block Storage Service Versions</title>
      <para>The Cloud Block Storage version defines the contract and
        build information for the API. </para>
      <section xml:id="Contract_Version-d1e825">
        <title>Contract Version</title>
        <para> The contract version denotes the data model and
          behavior that the API supports. The requested contract
          version is included in all request URLs. Different contract
          versions of the API may be available at any given time and
          are not guaranteed to be compatible with one another. </para>
        <example>
          <title>Example Request URL (contract version in <emphasis
              role="strong">bold</emphasis>)</title>
          <programlisting>https://dfw.blockstorage.api.rackspacecloud.com/v1/1234/</programlisting>
        </example>
        <note>
          <para>This document pertains to contract version 1.0.</para>
        </note>
      </section>
    </section>
    <section xml:id="Request_Response_Types-d1e903">
      <title>Request/Response Types</title>
      <para>The Cloud Block Storage API supports both the JSON and XML
        data serialization formats. The request format is specified
        using the <code>Content-Type</code> header and is required for
        calls that have a request body. The response format can be
        specified in requests either by using the <code>Accept</code>
        header or by adding an <code>.xml</code> or <code>.json</code>
        extension to the request URI. Note that it is possible for a
        response to be serialized using a format different from the
        request. If no response format is specified, JSON is the
        default. If conflicting formats are specified using both an
          <code>Accept</code> header and a query extension, the query
        extension takes precedence.</para>
      <para security="writeronly">Some operations support an Atom
        representation that can be used to efficiently determine when
        the state of services has changed. </para>
      
      <table rules="all">
        <caption>Response Formats</caption>
        <?dbfo keep-together="always"?>
        <thead>
          <tr align="center">
            <td>Format</td>
            <td>Accept Header</td>
            <td>Query Extension</td>
            <td>Default</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>JSON</td>
            <td>application/json</td>
            <td>.json</td>
            <td>Yes</td>
          </tr>
          <tr>
            <td>XML</td>
            <td>application/xml</td>
            <td>.xml</td>
            <td>No</td>
          </tr>
        </tbody>
      </table>

      <para>In the request example below, notice that
          <parameter>Content-Type</parameter> is set to
          <parameter>application/json</parameter>, but
          <parameter>application/xml</parameter> is requested via the
          <parameter>Accept</parameter> header:</para>

      <example>
        <title>Request with Headers (Getting Volume Types)</title>
        <literallayout class="monospaced">
  GET /v1/441446/types HTTP/1.1
  Host: dfw.blockstorage.api.rackspacecloud.com
  X-Auth-Token: eaaafd18-0fed-4b3a-81b4-663c99ec1cbb
  Accept: application/xml
                    </literallayout>
      </example>

      <para><?rax-fo keep-with-next?>Therefore an XML response format
        is returned:</para>

      <example>
        <title>Response with Headers</title>
        <literallayout class="monospaced">
  HTTP/1.1 200 OK
  Date: Fri, 20 Jul 2012 20:32:13 GMT
  Content-Length: 187
  Content-Type: application/xml
  X-Compute-Request-Id: req-8e0295cd-a283-46e4-96da-cae05cbfd1c7
  
  &lt;?xml version='1.0' encoding='UTF-8'?&gt;
  &lt;volume_types&gt;
      &lt;volume_type id="1" name="SATA"&gt;
          &lt;extra_specs/&gt;
      &lt;/volume_type&gt;
      &lt;volume_type id="2" name="SSD"&gt;
          &lt;extra_specs/&gt;
      &lt;/volume_type&gt;
  &lt;/volume_types&gt;
     </literallayout>
      </example>

    </section>
    
    <!-- 
    <section xml:id="sync_asynch_responses" security="writeronly">
      <title>Synchronous and Asynchronous Responses</title>
      <remark security="reviewer">Reviewer: please give me the updated info for this
        section. Need to replace info about callback URL,
        etc.</remark>
      <para> All successful &GET; requests are
          synchronous calls, since they are
        always retrieving (reading) existing information. With these
        requests, the caller waits until the call returns with the
        specified code and response body. For an example, see
        XXXX.</para>
      <para>&PUT;, &POST;, and &DELETE; calls are
          asynchronous, however, since they may
        take some time to process. Therefore they return 202 ACCEPTED
        responses containing information with a callback URL, which
        allows the progress, status, and/or response information of
        the call to be retrieved at a later point in time. The
        asynchronous response body will look similar to the following
        examples, depending on the format requested:</para>
      <example>
        <title>202 ACCEPTED Response: XML</title>
        <?dbfo keep-together="always"?>
        <programlisting language="xml">Reviewer: need code example</programlisting>
      </example>
      <example>
        <title>202 ACCEPTED Response: JSON</title>
        <?dbfo keep-together="always"?>
        <programlisting language="json">Reviewer: need code example</programlisting>
      </example>
      <para>The following table shows the attributes for asynchronous
        responses:</para>
      <table rules="all">
        <caption>Attributes for Asynchronous Responses</caption>
        <?dbfo keep-together="always"?>
        <thead>
          <tr align="center">
            <td colspan="1">Attribute</td>
            <td colspan="4">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">jobId</td>
            <td colspan="4">An identifier for the specific
              request.</td>
          </tr>
          <tr>
            <td colspan="1">callbackUrl</td>
            <td colspan="4">Resource locator for querying the status
              of the request.</td>
          </tr>
        </tbody>
      </table>
      <note>
        <para>The status for asynchronous calls is retained for up to
          24 hours.</para>
      </note>
      <note>
        <para>If a request body does not pass initial validation or an
          error condition arises, you may receive an immediate error
          response from the request.</para>
      </note>
      <para>When a request is made to the callback URL provided and
        the job is still running, another
          <returnvalue>202</returnvalue> ACCEPTED response is returned
        with the same information as the previous one. If the request
        is complete, the response will be as if the original call
        returned as normal, without waiting. For example, if a Create
        Database request was issued and a 202 asynchronous response
        was returned, the response from querying the callback URL for
        a completed successful database creation would be a
          <returnvalue>200</returnvalue> OK and contain the
        information for the created database. See XXXX for a specific
        example.</para>
      <para>If an error occurs during the processing of the create
        request, querying the callback URL will return the details of
        the error, as if the original call returned the error
        response. For example, if a validation error occurs during the
        Create Database request above, the response from querying the
        callback URL would be a <returnvalue>400</returnvalue> BAD
        REQUEST and contain details regarding the specific validation
        error.</para>
      <note>
        <para>If the response from querying a callback URL is a
            <returnvalue>404</returnvalue> NOT FOUND, the details of
          the error in the response body will contain information the
          caller may use to determine whether the specified job itself
          was not found, or if the response from the original request
          was a <returnvalue>404</returnvalue> NOT FOUND. </para>
      </note>
      <para>The description of each &PUT;, &POST;, and &DELETE;
        request identifies the response codes that can indicate
        success or error for that request. For example, see XXXX
        immediately below the table for a list of the successful and
        error response codes for the POST /xxxx call.</para>
    </section>
    <section xml:id="Content_Compression-d1e1120"
      security="writeronly">
      <title>Content Compression</title>
      <remark security="reviewer">Reviewer: I am hiding this entire section for the
        Private Beta, since I'm not sure that it applies. Is that
        correct?</remark>
      <para> Request and response body data may be encoded with gzip
        compression to accelerate interactive performance of API calls
        and responses. This is controlled using the
          <code>Accept-Encoding</code> header on the request from the
        client and indicated by the <code>Content-Encoding</code>
        header in the server response. Unless the header is explicitly
        set, encoding defaults to disabled. </para>
      <table rules="all">
        <caption>Encoding Headers</caption>
        <?dbfo keep-together="always"?>
        <thead>
          <tr align="center">
            <td>Header Type</td>
            <td>Name</td>
            <td>Value</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>HTTP/1.1 Request</td>
            <td><code>Accept-Encoding</code></td>
            <td>gzip</td>
          </tr>
          <tr>
            <td>HTTP/1.1 Response</td>
            <td><code>Content-Encoding</code></td>
            <td>gzip</td>
          </tr>
        </tbody>
      </table>
    </section>
    <section xml:id="Persistent_Connections-d1e1187"
      security="writeronly">
      <title>Persistent Connections</title>
      <remark security="reviewer">Reviewer: I am hiding this entire section for the
        Private Beta, since I'm not sure that it applies. Is that
        correct?</remark>
      <para> By default, the API supports persistent connections via
        HTTP/1.1 keepalives. All connections will be kept alive unless
        the connection header is set to close. </para>
      <para> To prevent abuse, HTTP sessions have a timeout of 20
        seconds before being closed. </para>
      <note>
        <para> The server may close the connection at any time and
          clients should not rely on this behavior. </para>
      </note>
    </section>
    -->
    <?hard-pagebreak?>
    <section xml:id="Limits-d1e1208">
      <title>Limits</title>
      <para>All accounts, by default, have a preconfigured set of
        thresholds (or limits) to manage capacity and prevent abuse of
        the system. The system recognizes two kinds of limits:
          <firstterm>rate limits</firstterm> and <firstterm>absolute
          limits</firstterm>. Rate limits are thresholds that are
        reset after a certain amount of time passes. Absolute limits
        are fixed. </para>
      <section xml:id="Rate_Limits-d1e1222" security="writeronly">
        <title>Rate Limits</title>
        <para>Rate limits are specified in terms of both a
          human-readable wild-card URI and a machine-processable
          regular expression. The regular expression boundary matcher
          '^' takes effect after the root URI path. For example, the
          regular expression ^/v1.0/instances would match the bolded
          portion of the following URI:
            https://dfw.blockstorage.api.rackspacecloud.com<emphasis
            role="bold">/v1.0/instances</emphasis>. </para>
        <para>The following table specifies the default rate limits
          for all API operations for all &GET;, &POST;, &PUT;, and
          &DELETE; calls for volumes: </para>
        <table rules="all">
          <caption>Default Rate Limits</caption>
          <thead>
            <tr align="center">
              <td colspan="1">Verb</td>
              <td colspan="2">URI</td>
              <td colspan="2">RegEx</td>
              <td colspan="1">Default</td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td colspan="1">&GET; changes-since</td>
              <td colspan="2">*/instances/*</td>
              <td colspan="2">^/v\d+\.\d+/\d+/instances.*</td>
              <td colspan="1">3/minute</td>
            </tr>
            <tr>
              <td colspan="1">&POST;</td>
              <td colspan="2">*/instances/*</td>
              <td colspan="2">^/v\d+\.\d+/\d+/instances.*</td>
              <td colspan="1">10/minute</td>
            </tr>
            <tr>
              <td colspan="1">&POST; instances</td>
              <td colspan="2">*/instances/*</td>
              <td colspan="2">^/v\d+\.\d+/\d+/instances.*</td>
              <td colspan="1">50/day</td>
            </tr>
            <tr>
              <td colspan="1">&PUT;</td>
              <td colspan="2">*/instances/*</td>
              <td colspan="2">^/v\d+\.\d+/\d+/instances.*</td>
              <td colspan="1">10/minute</td>
            </tr>
            <tr>
              <td colspan="1">&DELETE;</td>
              <td colspan="2">*/instances/*</td>
              <td colspan="2">^/v\d+\.\d+/\d+/instances.*</td>
              <td colspan="1">100/minute</td>
            </tr>
          </tbody>
        </table>

        <para>Rate limits are applied in order relative to the verb,
          going from least to most specific. For example, although the
          threshold for &POST; to /v1.0/* is 10 per minute, one cannot
          &POST; to /v1.0/* more than 50 times within a single day. </para>
        <para>If you exceed the thresholds established for your
          account, a <errorcode>413 (Rate Control)</errorcode> HTTP
          response will be returned with a <code>Retry-After</code>
          header to notify the client when it can attempt to try
          again. </para>
      </section>
      <section xml:id="Absolute_Limits-d1e1397">
        <title>Absolute Limits</title>

        <para>Refer to the following table for the absolute limits
          that are set.</para>
        <table rules="all">
          <caption>Absolute Limits</caption>
          <col width="120pt"/>
          <col width="201pt"/>
          <col width="50pt"/>
          <thead>
            <tr>
              <td colspan="1">Name</td>
              <td colspan="1">Description</td>
              <td colspan="1">Limit</td>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td colspan="1">Standard Performance Storage</td>
              <td colspan="1">Maximum amount of <emphasis role="bold"> 
                standard performance</emphasis> storage per region
                for applications that just need additional
                storage on their Cloud Server. </td>
              <td colspan="1">10 TB or 50 volumes</td>
            </tr>
            <tr>
              <td colspan="1">High Performance Storage</td>
              <td colspan="1">Maximum amount of <emphasis role="bold">
                High performance</emphasis> storage per region 
                for databases and high performance applications
                leveraging <emphasis role="bold">solid state
                  drives</emphasis> for speed and performance. </td>
              <td colspan="1">10 TB or 50 volumes</td>
            </tr>
          </tbody>
        </table>
      </section>
    </section>
    <section xml:id="datetimeformat">
      <title>Date/Time Format</title>
      <para>The Cloud Block Storage Service uses an ISO-8601 compliant
        date format for the display and consumption of date/time
        values. </para>
      <example>
        <title>DB Service Date/Time Format</title>
        <programlisting>yyyy-MM-dd'T'HH:mm:ss.SSSZ</programlisting>
        <para>See the table below for a description of the date/time
          format codes.</para>
        <para>May 19th, 2011 at 8:07:08 AM, GMT-5 would have the
          following format:</para>
        <programlisting>2011-05-19T08:07:08-05:00</programlisting>
      </example>
      <table rules="all">
        <caption>Explanation of Date/Time Format Codes</caption>
        <thead>
          <tr>
            <td>Code</td>
            <td>Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>yyyy</td>
            <td>Four digit year</td>
          </tr>
          <tr>
            <td>MM</td>
            <td>Two digit month</td>
          </tr>
          <tr>
            <td>dd</td>
            <td>Two digit day of month</td>
          </tr>
          <tr>
            <td>T</td>
            <td>Separator for date/time</td>
          </tr>
          <tr>
            <td>HH</td>
            <td>Two digit hour of day (00-23)</td>
          </tr>
          <tr>
            <td>mm</td>
            <td>Two digit minutes of hour</td>
          </tr>
          <tr>
            <td>ss</td>
            <td>Two digit seconds of the minute</td>
          </tr>
          <tr>
            <td>SSS</td>
            <td>Three digit milliseconds of the second</td>
          </tr>
          <tr>
            <td>Z</td>
            <td>RFC-822 timezone</td>
          </tr>
        </tbody>
      </table>
    </section>
    <section xml:id="pagination" security="writeronly">
      <title>Pagination</title>
      <remark security="reviewer">Reviewer: please review and give me your updates for
        this section. Dev needs to determine which API calls support
        pagination and then supply examples. I have hidden this entire
        section for now, since we do not believe that it will be
        supported for Private Beta. Correct?</remark>
      <para>To reduce load on the service, list operations will return
        a maximum of 100 items at a time. This is referred to as
          pagination.</para>
      <para>Pagination is the ability to limit the size of the
        returned data as well as retrieve a specified subset of a
        large data set. Pagination has two key concepts: limit and
        offset. Limit is the restriction on the maximum number of
        items for that type that can be returned. Offset is the
        starting point for the return data. For example, an offset of
        50 specifies that the items that are returned should start
        with item number 51 (since the numbering is one-based) in the
        collection. </para>
      <para>It is important to note that offset
          must be a multiple of the limit (or
        zero), otherwise a Bad Request Exception will be thrown. Both
        limit and offset are specified via request parameters on the
        URI. The parameters are named <code>limit</code> and
          <code>offset</code> respectively, and both apply only to
        &GET; calls. If unspecified, they default to
          <code>limit=100</code> and <code>offset=0</code>. See the
        examples that follow.</para>
      <example>
        <title>Examples of Limits and Offsets for Paging Calls</title>
        <?dbfo keep-together="always"?>
        <programlisting language="xml">Reviewer: Need code example.</programlisting>
      </example>
      <para>Pagination applies only to the calls listed in the
        following table: </para>
      <remark security="reviewer">Reviewer: need to update the table of paginated API
        calls below:</remark>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="1">Verb</td>
            <td colspan="2">URI</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/URI/</td>
            <td colspan="3">List all databases manageable by the
              account specified. </td>
          </tr>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2"
              >/URI/?name=<replaceable>Name</replaceable></td>
            <td colspan="3">Filter databases.</td>
          </tr>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2">/URI/<replaceable>ID</replaceable></td>
            <td colspan="3">List details of the specified
              database.</td>
          </tr>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2"
              >/URI/<replaceable>ID</replaceable>/xxx</td>
            <td colspan="3">List details xxx.</td>
          </tr>
          <tr>
            <td colspan="1">&GET;</td>
            <td colspan="2"
              >/URI/<replaceable>ID</replaceable>/yyy</td>
            <td colspan="3">List details yyy.</td>
          </tr>
        </tbody>
      </informaltable>
      <para>See the following section for examples of paged List
        Databases calls.</para>
      <section xml:id="Pagination_Elements_and_Attributes-d1e1754">
        <title>Pagination Elements and Attributes</title>
        <remark security="reviewer">Reviewer: please review and give me your updates for
          this section.</remark>
        <para>For any collection in a result, there is a
            <code>totalEntries</code> attribute representing the total
          number of entries there are for this item type. If the
          number of items requested in the &GET; call is less then the
          total number of items for this type, then there will be
          pagination links <code>previous</code> and/or
            <code>next</code>, specifying how to get to the previous
          and/or next set of records. </para>
        <note>
          <para>The <code>previous</code> and/or <code>next</code>
            link elements are displayed only if there are items
            available in the corresponding link. See the following
            examples for details.</para>
        </note>
        <example>
          <title>List Databases Request with limit: XML</title>
          <?dbfo keep-together="always"?>
          <programlisting language="xml">Reviewer: Need code example.</programlisting>
        </example>
        <example>
          <title>List Databases Request with limit: JSON</title>
          <?dbfo keep-together="always"?>
          <programlisting language="xml">Reviewer: Need code example.</programlisting>
        </example>
        <example>
          <title>List Databases Response with totalEntries:
            XML</title>
          <?dbfo keep-together="always"?>
          <programlisting language="xml">Reviewer: Need code example.</programlisting>
        </example>
        <example>
          <title>List Databases Response with totalEntries:
            JSON</title>
          <?dbfo keep-together="always"?>
          <programlisting language="xml">Reviewer: Need code example.</programlisting>
        </example>
        <para> In the previous two response examples, note that
            <code>totalEntries=112</code> and that a link has been
          provided to retrieve the next 3 results
            (<code>limit=3</code>) in the link element identified by
          the attribute <code>rel="next"</code> (XML) or
            <code>"rel":"next"</code> (JSON). </para>
        <para>The following example shows links to both previous and
          next results in the responses, since the request specified
          to start with the fourth item in the collection
            (<code>offset=3</code>):</para>
        <example>
          <title>List Databases Request with limit and offset:
            XML</title>
          <?dbfo keep-together="always"?>
          <programlisting language="xml">Reviewer: Need code example.</programlisting>
        </example>
        <example>
          <title>List Databases Request with limit and offset:
            JSON</title>
          <?dbfo keep-together="always"?>
          <programlisting language="xml">Reviewer: Need code example.</programlisting>
        </example>
        <example>
          <title>List Databases Response with Links to previous and
            next Results: XML</title>
          <?dbfo keep-together="always"?>
          <programlisting language="xml">Reviewer: Need code example.</programlisting>
        </example>
        <example>
          <title>List Databases Response with Links to previous and
            next Results: JSON</title>
          <?dbfo keep-together="always"?>
          <programlisting language="xml">Reviewer: Need code example.</programlisting>
        </example>
        <para>
          <?rax-fo keep-with-next?> In the previous two response
          examples, note that <code>totalEntries=112</code> and two
          links have been provided to:<itemizedlist>
            <listitem>
              <para>Retrieve the next 3 results (<code>limit=3</code>)
                via the link element identified by the attribute
                  <code>rel="next"</code> (XML) or
                  <code>"rel":"next"</code> (JSON)</para>
            </listitem>
            <listitem>
              <para>Retrieve the previous 3 results via the link
                element identified by the attribute
                  <code>rel="previous"</code> (XML) or
                  <code>"rel":"previous"</code> (JSON) </para>
            </listitem>
          </itemizedlist></para>
      </section>
    </section>
    <section xml:id="efficient_polling_changes_since_parm"
      security="writeronly">
      <title>Efficient Polling with the
          <parameter>Changes-Since</parameter> Parameter</title>
      <remark security="reviewer">Reviewer: I have hidden this section, since it does not
        appear that it will be supported for Private Beta.
        Correct?</remark>
      <para> The REST API allows you to poll for the status of certain
        operations by performing a &GET; on various URIs. Rather than
        re-downloading and re-parsing the full status at each polling
        interval, your REST client may use the
          <parameter>changes-since</parameter> parameter to check for
        changes since a previous request. The
          <parameter>changes-since</parameter> time is specified as
          <link xlink:href="http://en.wikipedia.org/wiki/Unix_time"
          >Unix time</link> (the number of seconds since January 1,
        1970, 00:00:00 UTC, not counting leap seconds). If nothing has
        changed since the <parameter>changes-since</parameter> time, a
          <returnvalue>304 (Not Modified)</returnvalue> response will
        be returned. If data has changed, only the items changed since
        the specified time will be returned in the response. </para>
      <remark security="reviewer">Reviewer: does the following sentence apply, and should
        it be included?</remark>
      <para>For example, performing a &GET; against
          https://api.servers.rackspacecloud.com/v1.0/224532/servers?<parameter>changes-since</parameter>=1244012982
        would list all servers that have changed since Wed, 03 Jun
        2009 07:09:42 UTC. </para>
    </section>
    <section xml:id="DB_faults" >
      <title>Faults</title>
      <para>When an error occurs, the Cloud Block Storage Service
        returns a fault object containing an HTTP error response code
        that denotes the type of error. In the body of the response,
        the system will return additional information about the fault. </para>
      <para>The following table lists possible fault types with their
        associated error codes and descriptions.</para>
      <informaltable rules="all">
        <thead>
          <tr align="center">
            <td colspan="2">Fault Type</td>
            <td colspan="1">Associated Error Code</td>
            <td colspan="3">Description</td>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td colspan="2"><code>badRequest</code></td>
            <td colspan="1">400</td>
            <td colspan="3">There was one or more errors in the user
              request.</td>
          </tr>
          <tr>
            <td colspan="2"><code>unauthorized</code></td>
            <td colspan="1">401</td>
            <td colspan="3">The supplied token is not authorized to
              access the resources, either it's expired or
              invalid.</td>
          </tr>
          <tr>
            <td colspan="2"><code>forbidden</code></td>
            <td colspan="1">403</td>
            <td colspan="3">Access to the requested resource was
              denied.</td>
          </tr>
          <tr>
            <td colspan="2"><code>itemNotFound</code></td>
            <td colspan="1">404</td>
            <td colspan="3">The back-end services did not find
              anything matching the Request-URI.</td>
          </tr>
          <tr>
            <td colspan="2"><code>badMethod</code></td>
            <td colspan="1">405</td>
            <td colspan="3">The request method is not allowed for this
              resource.</td>
          </tr>
          <tr>
            <td colspan="2"><code>overLimit</code></td>
            <td colspan="1">413</td>
            <td colspan="3">Either the number of entities in the
              request is larger than allowed limits, or the user has
              exceeded allowable request rate limits. See the
                <code>details</code> element for more specifics.
              Contact support if you think you need higher request
              rate limits.</td>
          </tr>
          <tr>
            <td colspan="2"><code>badMediaType</code></td>
            <td colspan="1">415</td>
            <td colspan="3">The requested content type is not
              supported by this service.</td>
          </tr>
          <tr>
            <td colspan="2"><code>unprocessableEntity</code></td>
            <td colspan="1">422</td>
            <td colspan="3">The requested resource could not be
              processed on at the moment.</td>
          </tr>
          <tr>
            <td colspan="2"><code>instanceFault</code></td>
            <td colspan="1">500</td>
            <td colspan="3">This is a generic server error and the
              message contains the reason for the error. This error
              could wrap several error messages and is a catch
              all.</td>
          </tr>
          <tr>
            <td colspan="2"><code>notImplemented</code></td>
            <td colspan="1">501</td>
            <td colspan="3">The requested method or resource is not
              implemented.</td>
          </tr>
          <tr>
            <td colspan="2"><code>serviceUnavailable</code></td>
            <td colspan="1">503</td>
            <td colspan="3">The Cloud Block Storage Service is not
              available.</td>
          </tr>
        </tbody>
      </informaltable>
      <para>The following two <code>instanceFault</code> examples show
        errors when the server has erred or cannot perform the
        requested operation:</para>
      <example>
        <title>Example instanceFault Response: XML</title>
        <?dbfo keep-together="always"?>
        <programlisting language="xml">
<xi:include href="../wadls/volume-api/src/samples/db-faults-instanceFault.xml" parse="text"/>
                    </programlisting>
      </example>
      <example>
        <title>Example Fault Response: JSON</title>
        <?dbfo keep-together="always"?>
        <programlisting language="json">
<xi:include href="../wadls/volume-api/src/samples/db-faults-instanceFault.json" parse="text"/>
                    </programlisting>
      </example>
      <para>The error code (<code>code</code>) is returned in the body
        of the response for convenience. The <code>message</code>
        element returns a human-readable message that is appropriate
        for display to the end user. The <code>details</code> element
        is optional and may contain information that is useful for
        tracking down an error, such as a stack trace. The
          <code>details</code> element may or may not be appropriate
        for display to an end user, depending on the role and
        experience of the end user.</para>
      <para>The fault's root element (for example,
          <code>instanceFault</code>) may change depending on the type
        of error. </para>
      <para><?rax-fo keep-with-next?>The following two
          <code>badRequest</code> examples show errors when the volume
        size is invalid:</para>
      <example>
        <title>Example badRequest Fault on Volume Size Errors:
          XML</title>
        <?dbfo keep-together="always"?>
        <programlisting language="xml">
<xi:include href="../wadls/volume-api/src/samples/db-faults-badRequest.xml" parse="text"/>
                    </programlisting>
      </example>
      <example>
        <title>Example badRequest Fault on Volume Size Errors:
          JSON</title>
        <?dbfo keep-together="always"?>
        <programlisting language="json">
<xi:include href="../wadls/volume-api/src/samples/db-faults-badRequest.json" parse="text"/>
                    </programlisting>
      </example>
      <para>The next two examples show <code>itemNotFound</code>
        errors:</para>
      <example>
        <title>Example itemNotFound Fault: XML</title>
        <?dbfo keep-together="always"?>
        <programlisting language="xml">
<xi:include href="../wadls/volume-api/src/samples/db-faults-itemNotFound.xml" parse="text"/>
                    </programlisting>
      </example>
      <example>
        <title>Example itemNotFound Fault: JSON</title>
        <?dbfo keep-together="always"?>
        <programlisting language="json">
<xi:include href="../wadls/volume-api/src/samples/db-faults-itemNotFound.json" parse="text"/>
                    </programlisting>
      </example>
    </section>
    <section xml:id="volume_status">
      <title>Volume Status</title>
      <para><?rax-fo keep-with-next?>When making an API call to
        create, list, or delete volume(s), the following volume status
        values are possible:</para>
      <itemizedlist spacing="compact">
        <listitem>
          <para>CREATING &ndash; The volume is being created.</para>
        </listitem>
        <listitem>
          <para>AVAILABLE &ndash; The volume is read to be attached to an instance.</para>
        </listitem>
        <listitem>
          <para>ATTACHING &ndash; The volume is attaching to an instance.</para>
        </listitem>
        <listitem>
          <para>IN-USE &ndash; The volume is attached to an instance.</para>
        </listitem>
        <listitem>
          <para>DELETING &ndash; The volume is being deleted.</para>
        </listitem>
        <listitem>
          <para>ERROR &ndash; There has been some error with the volume.</para>
        </listitem>
        <listitem>
          <para>ERROR_DELETING &ndash; There was an error deleting the volume.</para>
        </listitem>
      </itemizedlist>
    </section>
  </chapter>

  <chapter xml:id="volume"    
    xmlns="http://docbook.org/ns/docbook"
    role="api-reference" >
    <title>API Operations</title>
    <para>The Volume API allows you to manage volumes and snapshots
      that can be used with the Compute API.</para>
    <para>This chapter describes each of the operations. The following
      table summarizes all of the operations that are
      available:</para>
    <wadl:resources 
        href="../wadls/volume-api/src/os-volume-1.wadl" 
        xmlns:wadl="http://wadl.dev.java.net/2009/02"/>
  </chapter>
  <glossary xml:id="glossary-d1e018">
    <title>Glossary</title>
    <info>
      <raxm:metadata
        xmlns:raxm="http://docs.rackspace.com/api/metadata">
        <raxm:type>concept</raxm:type>
        <raxm:product version="v1.0">cbs</raxm:product>
        <raxm:priority>50</raxm:priority>
      </raxm:metadata>
    </info>
    <glossentry xml:id="claim-d1e017">
      <glossterm>Instance</glossterm>
      <glossdef>
        <para> An instance is a virtual machine that runs inside the
          cloud.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="message-d1e016">
      <glossterm>Instance Type</glossterm>
      <glossdef>
        <para>An instance type describes the compute, memory, and
          storage capacity of Nova computing instances. In layman's
          terms, this is the size (in terms of vCPUs, RAM, and so
          forth) of the virtual server that you will be
          launching.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="producer-d1e020">
      <glossterm>Snapshot</glossterm>
      <glossdef>
        <para>A snapshot is a point-in-time copy of the data contained
          in a volume.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="queue-d1e019">
      <glossterm>Volume</glossterm>
      <glossdef>
        <para>A volume is a detachable block storage device. You can
          think of it as a USB hard drive. It can only be attached to
          one instance at a time.</para>
      </glossdef>
    </glossentry>
    <glossentry xml:id="subscriber-d1e018">
      <glossterm>Volume Type</glossterm>
      <glossdef>
        <para>The volume type is the type of a block storage volume.
          There are two types: SATA for standard performance and SSD
          for high performance.</para>
      </glossdef>
    </glossentry>
  </glossary>

</book>
